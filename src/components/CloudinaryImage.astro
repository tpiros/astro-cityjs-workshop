---
import { Cloudinary, Transformation } from '@cloudinary/url-gen';
import { crop, scale, thumbnail } from '@cloudinary/url-gen/actions/resize';
import { autoGravity, focusOn } from '@cloudinary/url-gen/qualifiers/gravity';
import { face } from '@cloudinary/url-gen/qualifiers/focusOn';
import { format, quality } from '@cloudinary/url-gen/actions/delivery';
import { image, text } from '@cloudinary/url-gen/qualifiers/source';
import { source } from '@cloudinary/url-gen/actions/overlay';
import { brightness, opacity, red } from '@cloudinary/url-gen/actions/adjust';
import { Position } from '@cloudinary/url-gen/qualifiers';
import { TextStyle } from '@cloudinary/url-gen/qualifiers/textStyle';
import { focusOn as autoFocusOn } from '@cloudinary/url-gen/qualifiers/autoFocus';

const cld = new Cloudinary({
  cloud: {
    cloudName: 'tamas-demo',
  },
  url: {
    secure: true,
  },
});
const {
  publicId,
  width,
  height,
  findFace = false,
  underlay = false,
  aiCrop = false,
  target = '',
  logo = '',
  customText = '',
} = Astro.props;

let myImage;
if (width || height) {
  myImage = cld
    .image(publicId)
    .resize(scale().width(width).height(height))
    .delivery(format('auto'))
    .delivery(quality('auto'));
} else {
  myImage = cld
    .image(publicId)
    .delivery(format('auto'))
    .delivery(quality('auto'));
}

if (findFace) {
  myImage = cld
    .image(publicId)
    .resize(
      thumbnail()
        .width(width)
        .height(height)
        .zoom(0.75)
        .gravity(focusOn(face()))
    )
    .delivery(format('auto'))
    .delivery(quality('auto'));
}
if (aiCrop && target) {
  const values = {
    values: [],
    delimiter: '',
    name: target,
  } as any;

  myImage = cld
    .image(publicId)
    .resize(
      crop()
        .width(width)
        .height(height)
        .aspectRatio('1.0')
        .gravity(autoGravity().autoFocus(autoFocusOn(values)))
    )
    .delivery(format('auto'))
    .delivery(quality('auto'));
}

if (underlay && logo && customText) {
  const overlayLogo = logo;
  const overlayText = customText;
  myImage = cld
    .image(publicId)
    .adjust(opacity(0))
    .overlay(
      source(
        image(overlayLogo).transformation(
          new Transformation()
            .resize(scale().width(380))
            .adjust(brightness(-20))
        )
      ).position(new Position().offsetY(-200).offsetX(-5))
    )
    .overlay(
      source(
        text(overlayText, new TextStyle('Coustard', 100).fontWeight('bold'))
          .textColor('#000')
          .transformation(
            new Transformation().resize(scale().width(365)).adjust(opacity(70))
          )
      ).position(new Position().offsetY(0).offsetX(-5))
    )
    .overlay(
      source(image('jamstack-training/shirt_displace')).position(
        new Position().offsetY(10).offsetX(10).addQualifier('e_displace')
      )
    )
    .underlay(
      source(
        image('jamstack-training/shirt_only').transformation(
          new Transformation().adjust(red().level(-50))
        )
      )
    )
    .underlay(source(image('jamstack-training/model2')))
    .overlay(
      source(
        image('jamstack-training/heather_texture').transformation(
          new Transformation().adjust(opacity(29))
        )
      )
    )
    .delivery(format('auto'))
    .delivery(quality('auto'));
}

const finalImageUrl = myImage.toURL();
---

<img class="p-2" src={finalImageUrl} alt="A photo" />
